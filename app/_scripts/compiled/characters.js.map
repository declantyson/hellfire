{"version":3,"sources":["../src/characters.es6.js"],"names":["Character","game","startPosY","startPosX","stocks","startingStockCount","opts","id","name","maxSpeed","fps","acceleration","deceleration","turnDelay","hurtboxes","weight","airSpeed","jumpPower","jumpHeight","allowedJumps","jumpThreshold","currentSpeed","currentFallSpeed","currentDir","currentVerticalDir","jumpStart","y","jumpsRemaining","jumpHeld","jumping","stage","fall","gravity","floors","currentKeys","keyBindings","right","keyChanged","turn","move","left","stop","jump","up","down","x","canvas","width","height","loseStock","gameOver","console","log","maxMovementSpeed","i","length","dir","hitFloor","h","hurtbox","f","floor","Hurtbox"],"mappings":"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","file":"characters.js","sourcesContent":["/*\n *\n *\tXL Platform Fighter/Characters\n *\tXL Gaming/Declan Tyson\n *\tv0.0.39\n *\t16/09/2016\n *\n */\n\nclass Character {\n    constructor(game, startPosY, startPosX) {\n        this.game = game;\n        this.startPosX = startPosX;\n        this.startPosY = startPosY;\n        this.stocks = this.game.startingStockCount;\n    }\n\n    initialise(opts) {\n        // attributes\n        this.id = opts.id;\n        this.name = opts.name;\n        this.maxSpeed = opts.maxSpeed / this.game.fps;\n        this.acceleration = opts.acceleration;\n        this.deceleration = opts.deceleration;\n        this.turnDelay = opts.turnDelay;\n        this.hurtboxes = opts.hurtboxes;\n        this.weight = 1/opts.weight;\n        this.airSpeed = opts.airSpeed / this.game.fps;\n        this.jumpPower = 1/opts.jumpPower;\n        this.jumpHeight = opts.jumpHeight;\n        this.allowedJumps = opts.allowedJumps;\n        this.jumpThreshold = opts.jumpThreshold;\n\n        // state\n        this.currentSpeed = 0;\n        this.currentFallSpeed = 0;\n        this.currentDir = opts.currentDir;\n        this.currentVerticalDir = 1;\n        this.jumpStart = this.hurtboxes[0].y;\n        this.jumpsRemaining = opts.allowedJumps;\n        this.jumpHeld = false;\n        this.jumping = false;\n    }\n    \n    drawActions(stage) {\n\n        this.fall(stage.gravity, stage.floors);\n\n        if(this.game.currentKeys[this.game.keyBindings.right]) {\n            if (this.game.keyChanged && this.currentDir !== 1) {\n                this.turn(1);\n            }\n            this.move();\n        } else if (this.game.currentKeys[this.game.keyBindings.left]) {\n            if (this.game.keyChanged && this.currentDir !== -1) {\n                this.turn(-1);\n            }\n            this.move();\n        } else {\n            this.stop();\n        }\n\n        if (this.game.currentKeys[this.game.keyBindings.jump]) {\n            if(this.jumpHeld) return;\n            this.jumpHeld = true;\n            if (this.jumpsRemaining > 0) {\n                if (\n                    (this.currentVerticalDir === -1 &&\n                    this.jumpsRemaining < this.allowedJumps &&\n                    this.hurtboxes[0].y > this.jumpStart - this.jumpThreshold.up)\n                        ||\n                    (this.currentVerticalDir === 1 &&\n                    this.jumpsRemaining < this.allowedJumps &&\n                    this.hurtboxes[0].y > this.jumpStart - this.jumpThreshold.down)\n                ) {\n                    return;\n                }\n                this.jumpStart = this.hurtboxes[0].y;\n                this.currentVerticalDir = -1;\n                this.jumpsRemaining--;\n            }\n        } else {\n            this.jumpHeld = false;\n        }\n\n        if(this.hurtboxes[0].x < 0 || this.hurtboxes[0].y < 0 || this.hurtboxes[0].x > this.game.canvas.width || this.hurtboxes[0].y > this.game.canvas.height) {\n            this.loseStock();\n        }\n    }\n\n    loseStock() {\n        this.stocks--;\n\n        if(this.stocks <= 0) {\n            this.game.gameOver();\n        } else {\n            console.log(\"Resetting...\");\n            this.hurtboxes[0].x = this.startPosX;\n            this.hurtboxes[0].y = this.startPosY;\n            this.currentSpeed = 0;\n        }\n    }\n\n    move() {\n        var maxMovementSpeed = this.maxSpeed;\n        if(this.currentFallSpeed > 0) maxMovementSpeed = this.airSpeed;\n\n        var acceleration = maxMovementSpeed / (this.acceleration * this.game.fps);\n        if(this.currentSpeed < maxMovementSpeed) {\n            this.currentSpeed += acceleration;\n        }\n\n        for(let i = 0; i < this.hurtboxes.length; i++) {\n            this.hurtboxes[i].x += this.currentDir * this.currentSpeed;\n        }\n    }\n\n    stop() {\n        var deceleration = this.maxSpeed / (this.deceleration * this.game.fps);\n        if(this.currentFallSpeed > 0) {\n            deceleration = deceleration / 3;\n        }\n\n        if(this.currentSpeed > 0) {\n            this.currentSpeed -= deceleration;\n            if(this.currentSpeed < 0) this.currentSpeed = 0;\n        }\n\n        for(let i = 0; i < this.hurtboxes.length; i++) {\n            this.hurtboxes[i].x += this.currentDir * this.currentSpeed;\n        }\n    }\n\n    turn(dir) {\n        if(this.currentSpeed === 0) return;\n\n        let deceleration = this.maxSpeed / (this.turnDelay * this.game.fps);\n        if(this.currentSpeed > 0) {\n            this.currentSpeed -= deceleration;\n            if(this.currentSpeed < 0) this.currentSpeed = 0;\n        }\n\n        if(this.currentSpeed === 0) {\n            this.currentDir = dir;\n            this.game.keyChanged = false;\n        }\n    }\n\n    fall(gravity, floors) {\n        if(this.currentVerticalDir === -1) {\n            this.jump(gravity, floors);\n            return;\n        }\n\n        if(this.currentFallSpeed > 0) {\n            this.jumping = false;\n        }\n\n        var hitFloor = false;\n\n        for(let h = 0; h < this.hurtboxes.length; h++) {\n            let hurtbox = this.hurtboxes[h];\n\n            for(let f = 0; f < floors.length; f++) {\n                let floor = floors[f];\n                if(\n                    !this.jumping &&\n                    (hurtbox.y >= floor.y && this.currentVerticalDir === 1) &&\n                    ((hurtbox.y - hurtbox.height <= floor.y)) &&\n                    ((hurtbox.x >= floor.x && hurtbox.x <= floor.x + floor.width) ||\n                    (hurtbox.x + hurtbox.width >= floor.x && hurtbox.x + hurtbox.width <= floor.x + floor.width))\n                ) {\n                    hitFloor = true;\n                    this.hurtboxes[0].y = floor.y;\n                }\n            }\n            if(hitFloor) {\n                this.jumpsRemaining = this.allowedJumps;\n                this.currentFallSpeed = 0;\n                break;\n            } else if(this.jumpsRemaining === this.allowedJumps) {\n                this.jumpsRemaining = this.allowedJumps - 1;\n            }\n\n            this.currentFallSpeed += gravity / (this.weight * this.game.fps);\n            hurtbox.y += this.currentFallSpeed;\n        }\n    }\n    \n    jump(gravity, floors) {\n        if(this.hurtboxes[0].y > this.jumpStart - this.jumpHeight) {\n            this.currentFallSpeed -= gravity / (this.jumpPower * this.game.fps);\n            this.hurtboxes[0].y += this.currentFallSpeed;\n            this.jumping = true;\n        } else {\n            this.currentVerticalDir = 1;\n        }\n    }\n}\n\nclass Hurtbox {\n    constructor(x, y, width, height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n}\n"]}