{"version":3,"sources":["../src/characters.es6.js"],"names":["Character","game","startPosX","startPosY","stocks","startingStockCount","opts","id","name","maxSpeed","fps","acceleration","deceleration","turnDelay","hurtboxes","hitboxes","weight","airSpeed","jumpPower","jumpHeight","allowedJumps","jumpThreshold","currentSpeed","currentFallSpeed","currentDir","currentVerticalDir","jumpStart","y","jumpsRemaining","jumpHeld","jumping","stun","invulnerable","visibleHitboxes","stage","fall","gravity","floors","currentKeys","keyBindings","basicAttack","hitstun","right","keyChanged","turn","move","left","stop","jump","up","down","hurt","length","hurtbox","c","players","character","hit","hitbox","x","calculatedX","width","height","yOffset","getHit","canvas","loseStock","gameOver","angleToSpeedModifier","angle","knockback","dir","setTimeout","maxMovementSpeed","i","hitFloor","h","f","floor","Hurtbox","Hitbox","xOffset","damage","growth","hitstunFrames"],"mappings":"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","file":"characters.js","sourcesContent":["/*\n *\n *\tXL Platform Fighter/Characters\n *\tXL Gaming/Declan Tyson\n *\tv0.0.92\n *\t16/09/2016\n *\n */\n\nclass Character {\n    constructor(game, startPosX, startPosY) {\n        this.game = game;\n        this.startPosX = startPosX;\n        this.startPosY = startPosY;\n        this.stocks = this.game.startingStockCount;\n    }\n\n    initialise(opts) {\n        // attributes\n        this.id = opts.id;\n        this.name = opts.name;\n        this.maxSpeed = opts.maxSpeed / this.game.fps;\n        this.acceleration = opts.acceleration;\n        this.deceleration = opts.deceleration;\n        this.turnDelay = opts.turnDelay;\n        this.hurtboxes = opts.hurtboxes;\n        this.hitboxes = opts.hitboxes;\n        this.weight = 1/opts.weight;\n        this.airSpeed = opts.airSpeed / this.game.fps;\n        this.jumpPower = 1/opts.jumpPower;\n        this.jumpHeight = opts.jumpHeight;\n        this.allowedJumps = opts.allowedJumps;\n        this.jumpThreshold = opts.jumpThreshold;\n\n        // state\n        this.currentSpeed = 0;\n        this.currentFallSpeed = 0;\n        this.currentDir = opts.currentDir;\n        this.currentVerticalDir = 1;\n        this.jumpStart = this.hurtboxes[0].y;\n        this.jumpsRemaining = opts.allowedJumps;\n        this.jumpHeld = false;\n        this.jumping = false;\n        this.stun = false;\n        this.invulnerable = false;\n        this.visibleHitboxes = [];\n    }\n    \n    drawActions(stage) {\n        this.fall(stage.gravity, stage.floors);\n        this.visibleHitboxes = [];\n\n        if(this.game.currentKeys[this.keyBindings.basicAttack] && !this.stun) {\n            this.visibleHitboxes = this.hitboxes.basicAttack;\n        }\n\n        if(this.stun) {\n            this.hitstun();\n        } else if(this.game.currentKeys[this.keyBindings.right]) {\n            if (this.game.keyChanged && this.currentDir !== 1) {\n                this.turn(1);\n            }\n            this.move();\n        } else if (this.game.currentKeys[this.keyBindings.left]) {\n            if (this.game.keyChanged && this.currentDir !== -1) {\n                this.turn(-1);\n            }\n            this.move();\n        } else {\n            this.stop();\n        }\n\n        if (this.game.currentKeys[this.keyBindings.jump] && !this.stun) {\n            if(this.jumpHeld) return;\n            this.jumpHeld = true;\n            if (this.jumpsRemaining > 0) {\n                if (\n                    (this.currentVerticalDir === -1 &&\n                    this.jumpsRemaining < this.allowedJumps &&\n                    this.hurtboxes[0].y > this.jumpStart - this.jumpThreshold.up)\n                        ||\n                    (this.currentVerticalDir === 1 &&\n                    this.jumpsRemaining < this.allowedJumps &&\n                    this.hurtboxes[0].y > this.jumpStart - this.jumpThreshold.down)\n                ) {\n                    return;\n                }\n                this.jumpStart = this.hurtboxes[0].y;\n                this.currentVerticalDir = -1;\n                this.jumpsRemaining--;\n            }\n        } else {\n            this.jumpHeld = false;\n        }\n\n        if(!this.invulnerable) {\n            for (var hurt = 0; hurt < this.hurtboxes.length; hurt++) {\n                var hurtbox = this.hurtboxes[hurt];\n                for (var c = 0; c < this.game.players.length; c++) {\n                    var character = this.game.players[c].character;\n                    if (this === character) continue;\n                    for (var hit = 0; hit < character.visibleHitboxes.length; hit++) {\n                        var hitbox = character.visibleHitboxes[hit];\n                        if (\n                            (hurtbox.x < hitbox.calculatedX + hitbox.width &&\n                            hurtbox.x + hurtbox.width > hitbox.calculatedX) &&\n                            (hurtbox.y - hurtbox.height < character.hurtboxes[0].y - hitbox.yOffset &&\n                            hurtbox.y > character.hurtboxes[0].y - hitbox.yOffset - hitbox.height)\n                        ) {\n                            this.getHit(hitbox);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        if(this.hurtboxes[0].x < 0 || this.hurtboxes[0].y < 0 || this.hurtboxes[0].x > this.game.canvas.width || this.hurtboxes[0].y > this.game.canvas.height) {\n            this.loseStock();\n        }\n    }\n\n    loseStock() {\n        this.stocks--;\n        if(this.stocks <= 0) {\n            this.game.gameOver();\n        } else {\n            this.hurtboxes[0].x = this.startPosX;\n            this.hurtboxes[0].y = this.startPosY;\n            this.currentSpeed = 0;\n        }\n    }\n\n    getHit(hitbox) {\n        var angleToSpeedModifier = hitbox.angle / 45;\n\n        this.currentVerticalDir = -1;\n        this.currentFallSpeed = this.currentVerticalDir * angleToSpeedModifier * hitbox.knockback;\n\n        this.currentDir = (this.currentDir * hitbox.dir);\n        this.currentSpeed = (1 / angleToSpeedModifier) * hitbox.knockback;\n\n        //this.stun = true;\n        this.invulnerable = true;\n\n        var character = this;\n        setTimeout(function () {\n            character.invulnerable = false;\n        }, 100);\n\n        setTimeout(function() {\n            character.stun = false;\n        }, hitbox.hitstun);\n    }\n\n    hitstun() {\n        //this.stop()\n    }\n\n    move() {\n        var maxMovementSpeed = this.maxSpeed;\n        if(this.currentFallSpeed > 0) maxMovementSpeed = this.airSpeed;\n\n        var acceleration = maxMovementSpeed / (this.acceleration * this.game.fps);\n        if(this.currentSpeed < maxMovementSpeed) {\n            this.currentSpeed += acceleration;\n        }\n\n        for(let i = 0; i < this.hurtboxes.length; i++) {\n            this.hurtboxes[i].x += this.currentDir * this.currentSpeed;\n        }\n    }\n\n    stop() {\n        var deceleration = this.maxSpeed / (this.deceleration * this.game.fps);\n        if(this.currentFallSpeed > 0) {\n            deceleration = deceleration / 3;\n        }\n\n        if(this.currentSpeed > 0) {\n            this.currentSpeed -= deceleration;\n            if(this.currentSpeed < 0) this.currentSpeed = 0;\n        }\n\n        for(let i = 0; i < this.hurtboxes.length; i++) {\n            this.hurtboxes[i].x += this.currentDir * this.currentSpeed;\n        }\n    }\n\n    turn(dir) {\n        if(this.currentSpeed === 0) return;\n\n        let deceleration = this.maxSpeed / (this.turnDelay * this.game.fps);\n        if(this.currentSpeed > 0) {\n            this.currentSpeed -= deceleration;\n            if(this.currentSpeed < 0) this.currentSpeed = 0;\n        }\n\n        if(this.currentSpeed === 0) {\n            this.currentDir = dir;\n            this.game.keyChanged = false;\n        }\n    }\n\n    fall(gravity, floors) {\n        if(this.currentVerticalDir === -1) {\n            this.jump(gravity, floors);\n            return;\n        }\n\n        if(this.currentFallSpeed > 0) {\n            this.jumping = false;\n        }\n\n        var hitFloor = false;\n\n        for(let h = 0; h < this.hurtboxes.length; h++) {\n            let hurtbox = this.hurtboxes[h];\n\n            for(let f = 0; f < floors.length; f++) {\n                let floor = floors[f];\n                if(\n                    !this.jumping &&\n                    (hurtbox.y >= floor.y && this.currentVerticalDir === 1) &&\n                    ((hurtbox.y - hurtbox.height <= floor.y)) &&\n                    ((hurtbox.x >= floor.x && hurtbox.x <= floor.x + floor.width) ||\n                    (hurtbox.x + hurtbox.width >= floor.x && hurtbox.x + hurtbox.width <= floor.x + floor.width))\n                ) {\n                    hitFloor = true;\n                    if(this.stun) {\n                        this.stun = false;\n                        this.currentSpeed = this.currentDir;\n                    }\n                    this.hurtboxes[0].y = floor.y;\n                }\n            }\n            if(hitFloor) {\n                this.jumpsRemaining = this.allowedJumps;\n                this.currentFallSpeed = 0;\n                break;\n            } else if(this.jumpsRemaining === this.allowedJumps) {\n                this.jumpsRemaining = this.allowedJumps - 1;\n            }\n\n            this.currentFallSpeed += gravity / (this.weight * this.game.fps);\n            hurtbox.y += this.currentFallSpeed;\n        }\n    }\n    \n    jump(gravity, floors) {\n        if(this.hurtboxes[0].y > this.jumpStart - this.jumpHeight) {\n            this.currentFallSpeed -= gravity / (this.jumpPower * this.game.fps);\n            this.hurtboxes[0].y += this.currentFallSpeed;\n            this.jumping = true;\n        } else if(!this.stun) {\n            this.currentVerticalDir = 1;\n        }\n    }\n}\n\nclass Hurtbox {\n    constructor(x, y, width, height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n}\n\nclass Hitbox {\n    constructor(xOffset, yOffset, width, height, damage, angle, knockback, growth, hitstun) {\n        this.xOffset = xOffset;\n        this.yOffset = yOffset;\n        this.width = width;\n        this.height = height;\n        this.damage = damage;\n        this.angle = angle;\n        this.knockback = knockback;\n        this.growth = growth;\n        this.dir = 1;\n        let hitstunFrames = hitstun || 60;\n        this.hitstun = (hitstunFrames / 60) * 1000;\n    }\n}\n"]}